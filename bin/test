#!/usr/bin/env python3

import click  # https://click.palletsprojects.com/en/7.x/
import sys
import subprocess
import os

# FIXME: Hack to allow import from sibling package. Ref https://stackoverflow.com/a/27878845
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from mgit import execute


TEST_COMMAND = " python3 -m unittest tests/**.py "
INITIAL_DIRECTORY = os.getcwd()
CURRENT_FILE_DIR = os.path.dirname(os.path.realpath(__file__))


@click.group(
    invoke_without_command=True,
    context_settings={"help_option_names": ["-h", "--help"]},
)
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose mode.")
def cli(verbose):
    """
    Run tests for this project.
    """
    cd_project_root()
    command = f"{TEST_COMMAND} -v" if verbose else TEST_COMMAND
    execute.call(command, shell=True, verbose=verbose)
    os.chdir(INITIAL_DIRECTORY)


@cli.command()
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose mode.")
def watch(verbose):
    """
    Automatically run tests after updating files

    This depends on nodemon JS
    Ref: https://github.com/remy/nodemon
    """
    click.echo("Watching python files...\n")
    cd_project_root()
    watch_command = "nodemon --delay 2 --ext py --exec"
    additional = ' "python3 -m unittest -v tests/**.py"' if verbose else TEST_COMMAND
    command = watch_command + additional
    execute.call(command, shell=True, verbose=verbose)
    os.chdir(INITIAL_DIRECTORY)


def cd_project_root():
    os.chdir(os.path.dirname(CURRENT_FILE_DIR))


if __name__ == "__main__":
    cli()

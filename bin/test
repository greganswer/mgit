#!/usr/bin/env python3

import click  # https://click.palletsprojects.com/en/7.x/
import sys
import subprocess
import os

# FIXME: Hack to allow import from sibling package. Ref https://stackoverflow.com/a/27878845
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from mgit import execute


# TODO: Convert to string if shell=True requires it
# Ref: https://docs.python.org/3.7/library/unittest.html#command-line-interface
TEST_COMMAND = ["python3", "-m", "unittest", "tests/**.py"]
INITIAL_DIRECTORY = os.getcwd()
CURRENT_FILE_DIR = os.path.dirname(os.path.realpath(__file__))


class App:
    def __init__(self, log_file, verbose: bool):
        self.log_file = log_file
        self.verbose = verbose


@click.group(
    invoke_without_command=True,
    context_settings={"help_option_names": ["-h", "--help"]},
)
@click.option(
    "--log-file",
    "-l",
    type=click.File("w"),
    default=sys.stderr,
    show_default="stderr",
    help="File to log errors and warnings.",
)
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose mode.")
@click.pass_context
def cli(ctx, log_file, verbose):
    """
    Run tests for this project.
    """
    ctx.obj = App(log_file=log_file, verbose=verbose)

    cd_project_root()
    command = TEST_COMMAND
    if verbose:
        command.append("-v")

    execute.call(" ".join(command), shell=True, verbose=verbose)
    os.chdir(INITIAL_DIRECTORY)


@cli.command()
@click.option("--verbose", "-v", is_flag=True, help="Enable verbose mode.")
@click.pass_obj
def watch(app, verbose):
    """
    Automatically run tests after updating files

    This depends on nodemon JS
    Ref: https://github.com/remy/nodemon
    """
    click.echo("Watching python files...\n")
    watch_command = [
        "nodemon",
        "--delay",
        "2",
        "--ext",
        "py",
        "--exec",
    ]
    cd_project_root()
    # TODO: Clean this up
    command = watch_command + TEST_COMMAND
    command = " ".join(command)
    if verbose:
        command = " ".join(watch_command) + ' "python3 -m unittest -v tests/**.py"'

    execute.call(command, shell=True, verbose=verbose)
    os.chdir(INITIAL_DIRECTORY)


def cd_project_root():
    os.chdir(os.path.dirname(CURRENT_FILE_DIR))


if __name__ == "__main__":
    cli()
